<#@ template language="C#" inherits="TestTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using DAL;
using Entities;
using Moq;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
<#    var ObjectData = templateData.ObjectData;
    var DeleteProcedureTemplate = templateData.ProcedureDataList["PR_DELETE"];
    var GetProcedureTemplate = templateData.ProcedureDataList["PR_GET"];
    var InsertProcedureTemplate = templateData.ProcedureDataList["PR_INSERT"];
    var UpdateProcedureTemplate = templateData.ProcedureDataList["PR_UPDATE"];
 #>
namespace MiCaseCodeGeneratorResultTests
{
    [TestFixture()]
    class <#= ObjectData.ObjectName #>DALTests
    {
        private Mock<IDbConnection> Connection;
        private Mock<IDbCommand> Command;
        private Mock<<#= ObjectData.EntityName #>> Entity;

        public <#= ObjectData.EntityName #> TestEntity = new <#= ObjectData.EntityName #>
        {
<#    PushIndent("\t\t\t");
    foreach (var field in ObjectData) {  
        WriteLine("{0} = {1},", field.PropertyName, TestValueForPropertyType[field.Type]);      
    }
    PopIndent(); #>
        };

        private IEnumerable<<#= ObjectData.EntityName #>> TestEntityList = Enumerable.Empty<<#= ObjectData.EntityName #>>();
        private Mock<IDbDataParameter> Parameter;
        private Mock<IDataReader> Reader;

        [SetUp]
        public virtual void Setup()
        {
            Connection = new Mock<IDbConnection>();
            Command = new Mock<IDbCommand>();
            Parameter = new Mock<IDbDataParameter>();
            Reader = new Mock<IDataReader>();

            Connection.Setup(connection => connection.CreateCommand()).Returns(Command.Object);

            TestEntityList = SetUpTestEntityList();

            Command.Setup(cmd => cmd.CreateParameter()).Returns(Parameter.Object);
            var dataRecordStub = new Mock<IDataRecord>();
            dataRecordStub.SetupGet(r => r["ID"]).Returns(TestEntity.Id);
            Entity = new Mock<<#= ObjectData.EntityName #>>(dataRecordStub.Object);
            
            Command.Setup(r => r.ExecuteNonQuery());
        }

        private IEnumerable<<#= ObjectData.EntityName #>> SetUpTestEntityList()
        {
            yield return TestEntity;
        }

        [Test()]
        public void Test_Get_Exists_ReturnsEntity()
        {
            Reader.Setup(reader => reader.Read()).Returns(true);

            // we only need to mock integer and datetime fields :^)
<#    SetupGet(); #>
            Reader.SetupGet(r => r["ID"]).Returns(TestEntity.Id);

            Command.Setup(r => r.ExecuteReader()).Returns(Reader.Object);
            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);

            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Get(TestEntity.Id);

            Assert.AreEqual(TestEntity.Id, actual.Id);
            Reader.Verify(x => x.Read(), Times.Once);
            Connection.Verify(x => x.CreateCommand(), Times.Once);
        }

        [Test()]
        public void Test_Get_DoesNotExist_ReturnsEmptyEntity()
        {
            Reader.Setup(reader => reader.Read()).Returns(false);

            Command.Setup(r => r.ExecuteReader()).Returns(Reader.Object);
            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);

            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Get(TestEntity.Id);
            var emptyEntity = new <#= ObjectData.EntityName #>();
            Reader.Verify(x => x.Read(), Times.Once);
            Assert.AreEqual(actual.Id, emptyEntity.Id);
        }

        [Test()]
        public void Test_GetAll_Exists_ReturnsEntities()
        {
            Reader.Setup(reader => reader.Read()).Returns(true);

            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);
            Command.Setup(r => r.ExecuteReader()).Returns(Reader.Object);
            
<#    SetupGet(); #>
            Reader.SetupGet(r => r["ID"]).Returns(TestEntity.Id);

            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.GetAll();

            Assert.AreEqual(TestEntityList.First().Id, actual.First().Id);
            Connection.Verify(x => x.CreateCommand(), Times.Once);
            Reader.Verify(x => x.Read(), Times.AtLeastOnce);
        }

        [Test()]
        public void Test_GetAll_DoesNotExist_ReturnsEmptyEntity()
        {
            Reader.Setup(reader => reader.Read()).Returns(false);

            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);
            Command.Setup(r => r.ExecuteReader()).Returns(Reader.Object);

            // we only need to mock integer and datetime fields :^)
<#    SetupGet(); #>
            Reader.SetupGet(r => r["ID"]).Returns(TestEntity.Id);
            // TODO add the rest of the columns
            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);
            
            var actual = <#= ObjectData.ObjectName #>DAL.GetAll();

            Assert.AreEqual(0, actual.Count());
            Connection.Verify(x => x.CreateCommand(), Times.Once);
            Reader.Verify(x => x.Read(), Times.AtLeastOnce);
        }
<#   var outParam = InsertProcedureTemplate.OutParam;   #>
        [Test()]
        public void Test_Save_Insert_ReturnsId()
        {
            Reader.Setup(reader => reader.Read()).Returns(true);
            
            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);
            Command.Setup(r => r.ExecuteReader()).Returns(Reader.Object);

            Reader.SetupGet(r => r["<#= outParam.ParameterName #>"]).Returns(TestEntity.<#= outParam.PropertyName #>);
            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Save(TestEntity);

            Assert.AreEqual(TestEntity.Id, actual);
            Reader.Verify(x => x.Read(), Times.Once);
        }
        [Test()]
        public void Test_Save_DoesNotInsert_ReturnsZero()
        {
            Reader.Setup(reader => reader.Read()).Returns(false);

            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);
            Command.Setup(r => r.ExecuteReader()).Returns(Reader.Object);

            //Reader.SetupGet(r => r["PO_DIET_ID"]).Returns(TestEntity.RequestId);
            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Save(TestEntity);

            Assert.AreEqual(0, actual);
            Reader.Verify(x => x.Read(), Times.Once);
        }

        [Test()]
        public void Test_Update_Updated_ReturnsId()
        {
            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);
            Command.Setup(r => r.ExecuteNonQuery()).Returns(1);
            
            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Update(TestEntity);

            Assert.AreEqual(TestEntity.Id, actual);
            Connection.Verify(x => x.CreateCommand(), Times.Once);
            Command.Verify(x => x.ExecuteNonQuery(), Times.Once);
        }
        [Test()]
        public void Test_Update_DoesNotUpdate_ReturnsZero()
        {
            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);

            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Update(TestEntity);

            Assert.AreEqual(0, actual);
            Connection.Verify(x => x.CreateCommand(), Times.Once);
            Command.Verify(x => x.ExecuteNonQuery(), Times.Once);
        }

        [Test()]
        public void Test_Delete_Exists_ReturnsTrue()
        {
            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);
            Command.Setup(r => r.ExecuteNonQuery()).Returns(1);

            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Delete(TestEntity.Id);
            
            Assert.AreEqual(true, actual);
            Connection.Verify(x => x.CreateCommand(), Times.Once);
            Command.Verify(x => x.ExecuteNonQuery(), Times.Once);
        }

        [Test()]
        public void Test_Delete_DoesNotExist_ReturnsFalse()
        {
            var mockParameters = new Mock<IDataParameterCollection>();
            Command.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);
            Command.Setup(r => r.ExecuteNonQuery()).Returns(0);

            var <#= ObjectData.ObjectName #>DAL = new <#= ObjectData.ObjectName #>DAL(Connection.Object);

            var actual = <#= ObjectData.ObjectName #>DAL.Delete(TestEntity.Id);

            Assert.AreEqual(false, actual);
            Connection.Verify(x => x.CreateCommand(), Times.Once);
            Command.Verify(x => x.ExecuteNonQuery(), Times.Once);
        }
    }
}
