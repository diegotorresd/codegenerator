<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using DAL;
using Entities;
using Logic.Interfaces;
using System;
using System.Collections.Generic;

namespace Logic
{
    public class LogicFactory
    {
        private Dictionary<Type, Type> Mapper { get; set; }

        public LogicFactory()
        {
            Mapper = new Dictionary<Type, Type>();
<#    foreach (string objName in ObjectNames) { #>
            Mapper.Add(typeof(<#= objName #>Entity), typeof(<#= objName #>Logic));
<#    } #>
        }

        public ILogic<T> Create<T>(IDAL<T> dal) where T : BaseEntity
        {
            return (ILogic<T>)Activator.CreateInstance(Mapper[typeof(T)], dal);
        }
    }
}